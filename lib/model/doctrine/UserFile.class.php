<?php

/**
 * UserFile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    PhpProject1
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class UserFile extends BaseUserFile
{
  // overrite this procedure to return a more descriptive value for the id dropdowns
  public function __toString()
  {
    return (string) $this->getClientName();
  }
  
  public function obtainClientId($module_name)
  {    
    return $this->getClientId();
  }
  
  public function obtainUserFileId($module_name)
  {
    return $this->getId();
  }
  
  
  public function getUCommittalStream()
  {
    $all = $this->getCommittalStream();    
    return ($all && isset($all[0])) ? $all[0] : null;
  }
  
  
  public function getNewFileNumber()
  {
    $number = (int)UserFileTable::getCurrentFileNumber();
    return str_pad(($number+1), 6, "0", STR_PAD_LEFT);
  }
  
  public function getClientName()
  {
    return 'File: '.$this->number.'; Client: '.$this->getClient()->getLastName().', '.$this->getClient()->getFirstName();
  }
  
  public function getFullAddress($with_name=null, $with_contact=null, $which=null)
  {
    $street = $this->getStreet();
    $suburb = $this->getSuburb();
    $postcode = $this->getPostcode();
    $state = $this->getState();
    if ($which == 'other') {
      $street = $this->getStreet2();
      $suburb = $this->getSuburb2();
      $postcode = $this->getPostcode2();
      $state = $this->getState2();
    }
    
    if ($with_name) $address_arr[] = trim($this->getName());
    
    $address_arr0[] = trim($street);
    $address_arr0[] = trim($suburb);
    $address_arr[] = implode("\n", array_filter($address_arr0));
    if ($address_arr[sizeof($address_arr)-1]) $address_arr[] = trim($state." ".$postcode);

    if ($with_contact) $address_arr[] = trim($this->getContactData());
    
    $full_address = implode("\n", array_filter($address_arr));
    
    return $full_address;
  }
  
  public function getContactData($option='all')
  {
    $phones_arr = array(
        'home' => trim($this->getHomePhone()),  'work' => trim($this->getWorkPhone()), 
        'mobile' => trim($this->getMobile()),   'other' => trim($this->getOtherPhone())
        );
    
    if ($option == 'ical') {  // for court date iCal only
      $contact_info = implode("/", array_filter($phones_arr));
    }
    else {
      if ($option == 'phonesfixed') {  // fixed to document text areas
        unset($phones_arr['other']);
        foreach ($phones_arr as $type => $phone) $contact_info_arr[] = $phone;
        $contact_info = implode("\n\r", $contact_info_arr);   // add white space inf phone is empty string
      }
      else {
        foreach ($phones_arr as $type => $phone) {
          $contact_info_arr[] = ($phone != '') ? ucfirst($type).": ".$phone : "";
        }
        if ($option == 'all') $contact_info_arr[] = (trim($this->getEmail())!='') ? "Email: ".trim($this->getEmail()) : "";
        $contact_info = implode("\n", array_filter($contact_info_arr));
      }
    }
    
    return $contact_info;
  }
  
  public function buildChargeList($text_type='modifiable')
  {
    $ln_break = ($text_type=='modifiable') ? "\n" : "<br/>";
    
    $charges = $this->getFileCharges();
    $charge_list = '';
    
    if ($charges) {
      foreach ($charges as $k => $charge) {
        $charge_item = $charge->getCharge();
        if (!empty($charge_item)) $charge_list.= "  ".($k+1).".  ".$charge_item.$ln_break;
      }
    }
    
    return $charge_list;
  }
  
  public function getChargesDate($format='')
  {
    $charges = $this->getFileCharges();
    
    // if charges return first charge date
    if ($charges) return ($format!='') ? date($format, strtotime($charges[0]->getDate())) : $charges[0]->getDate();
    // else return empty;
    return '';
  }
  
  
  public function buildResultList()
  {
    $court_dates = $this->getFileCourtDates();
    $result_list = '';
    
    if ($court_dates) {
      foreach ($court_dates as $k => $court_date) {
        $result_item = $court_date->getResult();
        if (!empty($result_item)) {
          if ($k > 0) $result_list.= "\n\n";
          $result_list.= "Date: ".$court_date->getDate()."\n".$result_item;
        }
      }
    }
    
    return $result_list;
  }
  
  
  public function getFullName()
  {
    return $this->first_name.' '.$this->last_name;
  }
  
  public function setUserData($user_id, $obj=null, $object_type='client')
  {
    $pfix = 'user_file_';
    $userx = array();
    $only_client_data = false;
    
    if ($obj === null) {
      $user_arr = Doctrine_Query::create()
            //->select('u.id, p.*')
            ->from('sfGuardUser u')
            ->leftJoin('u.UserProfiles p')
            ->where('u.id=?', $user_id)
            ->fetchArray();
      $user = isset($user_arr[0]) ? $user_arr[0] : null;
    }
    else {
      if ($object_type == 'client') $only_client_data = true;
      $user = $obj->toArray();
    }
    
    if ($user) {
      if ($object_type == 'client') {
        if (isset($user['UserProfiles'])) {
          foreach ($user['UserProfiles'] as $key => $value)  $user[$key] = $value;
        }
        $user['email'] = $user['email_address'];   // different names for same field
      }
      
      $this->setClientId($user_id);
      $userx[$pfix.'first_name']            = $this->first_name           = $user['first_name'];
      $userx[$pfix.'last_name']             = $this->last_name            = $user['last_name'];
      $userx[$pfix.'honorific_id']          = $this->honorific_id         = $user['honorific_id'];
      $userx[$pfix.'preferred_contact_id']  = $this->preferred_contact_id = $user['preferred_contact_id'];
      $userx[$pfix.'street']                = $this->street               = $user['street'];
      $userx[$pfix.'suburb']                = $this->suburb               = $user['suburb'];
      $userx[$pfix.'postcode']              = $this->postcode             = $user['postcode'];
      $userx[$pfix.'city']                  = $this->city                 = $user['city'];
      $userx[$pfix.'state']                 = $this->state                = $user['state'];
      $userx[$pfix.'home_phone']            = $this->home_phone           = $user['home_phone'];
      $userx[$pfix.'work_phone']            = $this->work_phone           = $user['work_phone'];
      $userx[$pfix.'mobile']                = $this->mobile               = $user['mobile'];
      $userx[$pfix.'other_phone']           = $this->other_phone          = $user['other_phone'];
      $userx[$pfix.'fax']                   = $this->fax                  = $user['fax'];
      $userx[$pfix.'email']                 = $this->email                = $user['email'];
      
      if (!$only_client_data) {
        
        if ($object_type == 'client') {
          // load the real name as default 
          $userx[$pfix.'charge_first_name'] = $this->charge_first_name = $user['first_name'];
          $userx[$pfix.'charge_last_name']  = $this->charge_last_name = $user['last_name'];
      
          // empty these values
          $userx[$pfix.'street2']   = $this->street2 = '';
          $userx[$pfix.'suburb2']   = $this->suburb2 = '';
          $userx[$pfix.'postcode2'] = $this->postcode2 = '';
          $userx[$pfix.'city2']     = $this->city2 = '';
          $userx[$pfix.'state2']    = $this->state2 = '';
          
          $userx[$pfix.'correspondence_title'] = $this->correspondence_title = false;  // uncheck checkbox
          $userx[$pfix.'correspondence_real_name'] = $this->correspondence_real_name = false;
          $userx[$pfix.'correspondence_sent_option'] = $this->correspondence_sent_option = '';
        }
        else {  // copy the data from original user file
          $this->charge_first_name = $user['charge_first_name'];
          $this->charge_last_name = $user['charge_last_name'];
          $this->street2 = $user['street2'];
          $this->suburb2 = $user['suburb2'];
          $this->postcode2 = $user['postcode2'];
          $this->city2 = $user['city2'];
          $this->state2 = $user['state2'];
          
          $this->correspondence_title = $user['correspondence_title'];
          $this->correspondence_real_name = $user['correspondence_real_name'];
          $this->correspondence_sent_option = $user['correspondence_sent_option'];
        }
      }
    }
    return $userx;
  }
  
  
  public function getCourtDatesState()
  {
    $msg = '';
    $updated = false;
    $most_recent_cd_t = 0;
    $today_t = strtotime(date('Y-m-d'));
    
    if ($this->getStatus()->getName() != 'Closed') {
      foreach ($this->getFileCourtDates() as $cd) {
        $cd_t = strtotime($cd->getTime());
        if ($cd_t >= $today_t) {
          $updated = true;
          break;
        }
        elseif ($cd_t > $most_recent_cd_t) $most_recent_cd_t = $cd_t;
      }
      $most_recent_cd  = ($most_recent_cd_t > 0) ? date('D, j F Y - h:i A', $most_recent_cd_t) : '';
      if (!$updated) {
        $msg = 'This File has not been brought forward in the diary.';
        if ($most_recent_cd != '') $msg.= " The most recent Court Date was:".$most_recent_cd;
      }
    }
    return $msg;
  }
  
  
  public function changeStatus($status='close')
  {
    $s_id = ($status=='close') ? 38 : 39;     // just closed or re-open possible
    
    $this->setStatusId($s_id);
    $this->save();
    return true;
  }
  
  
  // added by William, 12/05/2013: overrides this method to get the courtdates in custom order
  public function getFileCourtDates()
  {
    $q = Doctrine_Core::getTable('CourtDate')
          ->createQuery('cd')
          ->where('cd.user_file_id = ?', $this->getId())
          ->orderBy('cd.time ASC');
 
    return $q->execute();
  }
  
}