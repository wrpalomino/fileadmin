<?php

/**
 * sfGuardUserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfGuardUserTable extends PluginsfGuardUserTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object sfGuardUserTable
     */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('sfGuardUser');
  }

  public function getDefaultUsername($prefix='username')
  {
    $connection = Doctrine_Manager::connection();
    $query = 'SELECT MAX(id) AS maximum FROM sf_guard_user';
    $statement = $connection->execute($query);
    $statement->execute();

    $resultset = $statement->fetch(PDO::FETCH_OBJ);
    return ($resultset) ? $prefix.($resultset->maximum+1) : $prefix.'1';
  }
  
  
  public function mainFilter(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    
    // to filter by Group according to the module
    $module_name = sfContext::getInstance()->getModuleName();
    $user_rel = 'ClientUserFiles';
    switch ($module_name) {
      case 'client':    
        $q->leftJoin($rootAlias.'.Groups gr');
        $q->addWhere('gr.code=?', 'CLI'); 
        $user_rel = 'ClientUserFiles';
        break;
      case 'informant': 
        $q->leftJoin($rootAlias.'.Groups gr');
        $q->addWhere('gr.code=?', 'INF'); 
        $user_rel = 'InformantUserFiles';
        break;
      case 'barrister': 
        $q->leftJoin($rootAlias.'.Groups gr');
        $q->addWhere('gr.code=?', 'BAR');
        $user_rel = 'BarristerUserFiles';
        break;
      case 'prosecutor': 
        $q->leftJoin($rootAlias.'.Groups gr');
        $q->addWhere('gr.code=?', 'PRO');
        $user_rel = 'ProsecutorUserFiles';
        break;
      case 'judge': 
        $q->leftJoin($rootAlias.'.Groups gr');
        $q->addWhere('gr.code=?', 'JUD');
        $user_rel = 'JudgeCourtDates';
        break;
    }
    
    return CommonTable::mainFilter($q, $this->getComponentName(), $user_rel);
  }
  
  // to load the user lists by group
  public function getUsersByGroup($q, $code)
  {
    $group = Doctrine::getTable('sfGuardGroup')->findOneBy('code', $code);
    if ($group) {
      $rootAlias = $q->getRootAlias();
      $q->leftJoin($rootAlias . '.sfGuardUserGroup ug')
      ->andWhere('ug.group_id=?', $group->getId());
    }
    return $q;    
  }
  
  public function getClients(Doctrine_Query $q)     { return $this->getUsersByGroup($q, 'CLI'); }
  
  public function getInformants(Doctrine_Query $q)  { return $this->getUsersByGroup($q, 'INF'); }

  public function getBarristers(Doctrine_Query $q)  { return $this->getUsersByGroup($q, 'BAR'); }
  
  public function getClerks(Doctrine_Query $q)      { return $this->getUsersByGroup($q, 'CLE'); }
  
  public function getProsecutors(Doctrine_Query $q) { return $this->getUsersByGroup($q, 'PRO'); }
  
  public function getJudges(Doctrine_Query $q)      { return $this->getUsersByGroup($q, 'JUD'); }
  
  public function getMagistrates(Doctrine_Query $q) { return $this->getUsersByGroup($q, 'MAG'); }
  
  
  // to load user combo boxes values by group
  public function getUsersByGroupCB($code)
  {
    $q = $this->createQuery('us');
    $q->leftJoin('us.Groups gg');
            
    if (is_array($code))  {
      foreach ($code as $k => $cod) {
        if ($k == 0) $q->addWhere('gg.code=?', $cod);
        else  $q->orWhere('gg.code=?', $cod);
      }
    }
    else {
      $q->andWhere('gg.code=?', $code);
    }
    $q->OrderBy('us.first_name ASC');
    
    return $q;
  }

  public function getVLAOfficersCB()      { return $this->getUsersByGroupCB('VAO'); }
  
  public function getClientsCB()          { return $this->getUsersByGroupCB('CLI'); }
    
  public function getInformantsCB()       { return $this->getUsersByGroupCB('INF'); }
  
  public function getProsecutorsCB()      { return $this->getUsersByGroupCB('PRO'); }
  
  public function getSolicitorsCB()       { return $this->getUsersByGroupCB('SOL'); }
  
  public function getBarristersCB()       { return $this->getUsersByGroupCB('BAR'); }
  
  public function getClerksCB()           { return $this->getUsersByGroupCB('CLE'); }
  
  public function getCoordinatorsCB()     { return $this->getUsersByGroupCB('COO'); }
  
  public function getJudgesCB()           { return $this->getUsersByGroupCB('JUD'); }
  
  public function getMagistratesCB()      { return $this->getUsersByGroupCB('MAG'); }
  
  
  // functions to separate users by group (court(agency) form)
  public function preLoadUsersByGroup($field, $value)
  {
    $qd = Doctrine_Query::create()
            ->select('*')
            ->from('sfGuardUser u, sfGuardGroup g, sfGuardUserGroup ug')
            ->where('ug.group_id = g.id AND ug.user_id = u.id')
            ->andWhere('g.'.$field.' = ?', $value);
             
    return $qd;
  }
  
  public function userBelongsGroup($user_id, $field, $value)
  {
    $qd = $this->preLoadUsersByGroup($field, $value);
    $qd->andwhere('u.id = ?', $user_id);
    $user = $qd->fetchOne();
    return ($user == null) ? false : true;
  }
  
  
  public static function findClientByName($name, $limit = 20)
  {
    //$results = $this->getUsersByGroupCB('CLI');
    
    $results = self::getInstance()->createQuery('us');
          $results->andWhere('us.last_name LIKE \'%'.$name.'%\'')
          ->limit($limit)
          ->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
 
    if(count($results) == 0)
      return array(array('id' => 'new--'.$name, 'last_name' => ''.$name)); // If no clients are found, return this as a new Client.
    else
      return $results;
  }
  
  
  function retrieveUsersForSelect($search_str, $limit, $code=null)
  {
    $q = ($code) ? $this->getUsersByGroupCB($code) : $this->createQuery('us');
    $q->andWhere('(us.first_name LIKE "%'.$search_str.'%" OR us.last_name LIKE "%'.$search_str.'%")')
        ->addOrderBy('us.last_name')
        ->limit($limit);

    $users = array();
    foreach ($q->execute() as $user) {
      $users[$user->getId()] = $user->obtainFullName();
    }
    return $users;
  }
  
}